<?xml version="1.0"?>
<launch>
	<!--
	LiDAR based odometry by scan matching pkg
	何だかんだでhdl_graph_slam/ScanMathingOdometryNodeletが一番使い勝手がいい
	bagfileから点群をパブリッシュしてやるなら
	-->
	<!-- arguments -->
	<arg name="base_frame_id" default="base_link" />
	<arg name="lidar_link" default="velodyne" />
	<arg name="odom_frame_id" default="lidar_odom" doc="" />
	<arg name="points_topic" default="/velodyne_points" doc="input points for odometory" />
	<arg name="enable_manager" default="false" doc="If you publish PointCloud2 from bagfile, set true" />
	<arg name="nodelet_manager" default="velodyne_nodelet_manager" />
	<arg name="enable_tf_base2lidar" default="false" doc="If you publish PointCloud2 from bagfile, set true" />
	<!--
	prefiltering arguments
	distance filter
	down sampling (voxel grid)
	-->
	<arg name="use_distance_filter" default="true" />
	<arg name="distance_near_thresh" default="0.1" />
	<arg name="distance_far_thresh" default="20.0" />
	<arg name="down_sampling_resolution" default="0.1" />
	<!--  -->
	<node if="$(arg enable_manager)" pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen">
		<!-- <param name="num_worker_threads" value="$(arg manager_threads)" /> -->
	</node>
	<!--  -->
	<!-- static transfrom publisher -->
	<node if="$(arg enable_tf_base2lidar)" name="base2lidar" pkg="tf2_ros" type="static_transform_publisher" args="0.5 0 0.86 0 0 0 $(arg base_frame_id) $(arg lidar_link)" />
	<!--  -->
	<!--  -->
	<!-- prefiltering_nodelet -->
	<node name="prefiltering_nodelet" pkg="nodelet" type="nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
		<remap from="/velodyne_points" to="$(arg points_topic)" />
		<!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
		<param name="base_link_frame" value="$(arg base_frame_id)" />
		<!-- distance filter -->
		<param name="use_distance_filter" value="$(arg use_distance_filter)" />
		<param name="distance_near_thresh" value="$(arg distance_near_thresh)" />
		<param name="distance_far_thresh" value="$(arg distance_far_thresh)" />
		<!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
		<param name="downsample_method" value="VOXELGRID" />
		<param name="downsample_resolution" value="$(arg down_sampling_resolution)" />
		<!-- NONE, RADIUS, or STATISTICAL -->
		<param name="outlier_removal_method" value="RADIUS" />
		<param name="statistical_mean_k" value="30" />
		<param name="statistical_stddev" value="1.0" />
		<param name="radius_radius" value="0.5" />
		<param name="radius_min_neighbors" value="2" />
	</node>
	<!--  -->
	<!--  -->
	<!-- Run scan_matching_odometry_nodelet in hdl_graph_slam pkg -->
	<node name="scan_matching_odometry_nodelet" pkg="nodelet" type="nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">
		<param name="points_topic" value="/filtered_points" />
		<param name="odom_frame_id" value="$(arg odom_frame_id)" />
		<param name="keyframe_delta_trans" value="1.0" />
		<param name="keyframe_delta_angle" value="1.0" />
		<param name="keyframe_delta_time" value="3000.0" />
		<param name="transform_thresholding" value="false" />
		<param name="max_acceptable_trans" value="5.0" />
		<param name="max_acceptable_angle" value="10.0" />
		<param name="downsample_method" value="NONE" />
		<param name="downsample_resolution" value="0.05" />
		<!-- ICP, GICP, NDT, GICP_OMP, or NDT_OMP(recommended) -->
		<param name="registration_method" value="GICP_OMP" />
		<param name="transformation_epsilon" value="0.01" />
		<param name="maximum_iterations" value="64" />
		<param name="use_reciprocal_correspondences" value="false" />
		<!--  -->
		<param name="gicp_correspondence_randomness" value="20" />
		<param name="gicp_max_optimizer_iterations" value="20" />
		<!--  -->
		<param name="ndt_resolution" value="5.0" />
		<param name="ndt_num_threads" value="0" />
		<param name="ndt_nn_search_method" value="DIRECT7" />
		<!--  -->
		<remap from="odom" to="$(arg odom_frame_id)" />
	</node>
</launch>
